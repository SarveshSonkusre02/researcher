import os
from typing import Tuple
from docx import Document
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas

def ensure_dir(path: str):
    os.makedirs(path, exist_ok=True)

def export_markdown(basepath: str, filename: str, markdown: str) -> str:
    ensure_dir(basepath)
    path = os.path.join(basepath, f"{filename}.md")
    with open(path, "w", encoding="utf-8") as f:
        f.write(markdown)
    return path

def export_docx(basepath: str, filename: str, title: str, md: str) -> str:
    ensure_dir(basepath)
    doc = Document()
    doc.add_heading(title, 0)
    for line in md.splitlines():
        doc.add_paragraph(line)
    path = os.path.join(basepath, f"{filename}.docx")
    doc.save(path)
    return path

def export_pdf(basepath: str, filename: str, title: str, md: str) -> str:
    ensure_dir(basepath)
    path = os.path.join(basepath, f"{filename}.pdf")
    c = canvas.Canvas(path, pagesize=A4)
    width, height = A4
    y = height - 50
    c.setFont("Helvetica-Bold", 14)
    c.drawString(50, y, title)
    y -= 30
    c.setFont("Helvetica", 10)
    for line in md.splitlines():
        if y < 50:
            c.showPage()
            y = height - 50
            c.setFont("Helvetica", 10)
        c.drawString(50, y, line)
        y -= 14
    c.save()
    return path

def build_markdown(company: str, data: dict, notes: str | None) -> str:
    questions = "\n".join([f"- {q}" for q in data.get("questions", [])])
    fw = data.get("framework", {})
    risks = "\n".join([f"- {r}" for r in fw.get("risks", [])])
    drivers = "\n".join([f"- {g}" for g in fw.get("growth_drivers", [])])
    bm = fw.get("business_model", "")

    md = f"""# Equity Research: {company}

## Research Questions
{questions}

## Business Model
{bm}

## Key Risks
{risks}

## Growth Drivers
{drivers}

## Analyst Notes
{notes or ""}

---
Generated by Equity Research Tool
"""
    return md
